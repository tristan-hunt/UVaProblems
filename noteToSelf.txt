# Morning Code vs. Late Night Code:
# Me in the morning: So pretty and clean


def greedy(est, K, M, books):
	"""
	Greedily assigns the work to each scribe, without assigning
		more than est.
	Return -1 if we undershot the estimate
	Return -2 if we didn't even use all our scribes
	Else return the maximum of the work of the scribes
	"""
	k = 0 # counter for scribes
	m = 0 # counter for books
	time = 0 # time taken for current scribe (in pages)
	maxt = 0 # max time taken of all the scribes 

	while (m < M):
		if(time + books[m] < est):
			time = time + books[m]
		else:
			if (time > maxt) : 
				maxt = time
			k = k + 1
	if m < M:
		return(-1)
	if k == K:
		return(-2)
	return(maxt)

def binarySearch(K, M, books):
	"""
	Use binary search to find the min of the maximum
	"""
	min_max = sum(books) + 1 # We can definitely do better than this
	result_found = False # This is for debugging, to flag if min_max has changed
	lo = min(books) # We know est will be bigger (or equal) to this (1 scribe per book)
	hi = max(books) # We know est will be smaller (or equal) to this (1 scribe total)
	
	estimate = lo # set the first estimate 

	while(1):
		result = greedy(estimate, K, M, books)
		
		# Evaluate the result, update our estimate
		if result == -1: # we went under
			lo = estimate
			estimate = estimate + math.floor((hi-lo)/2)
		elif result == -2: # we went WAY over
			hi = estimate
			estimate = estimate - math.floor((hi-lo)/2)
		else: # We *might* have the right answer 
			if result < min_max:
				min_max = result
				best_estimate = estimate
				result_found = True
			hi = estimate
			estimate = estimate - math.floor((hi-lo)/2)

		# Have we reached the end condition?
		if result == 0 or math.floor((hi-lo)/2) == 0: # perfect answer OR we are not even updating our estimate
			if(result_found):
				return(best_estimate)
			else: # should never happen. If so, my logic is flawed.
				raise RuntimeError
 
# Me at night: literally barfing code onto the screen at 3 am
for (m, k, p) in load():
	max_time = sum(p)
	min_time = min(p)
	time_est = max_time

	while(1):
		result = greedy(time_est, k, m, p)
		print("result: "+str(result)+" time est was: " + str(time_est) + " k: " + str(k) + " p: " +str(p))
		if result == 0: # we undershot in our estimate
			min_time = time_est
			adjust = int(math.floor((max_time - min_time)/2)) 
			time_est = time_est  + adjust
			if adjust == 0:
				result = 1
			
		elif result == 2: # we overshot
			max_time = time_est
			adjust = int(math.floor((max_time - min_time)/2))
			time_est = time_est - adjust
			if (adjust == 0):
				result = 1

		if result == 1: # jjuuuusssttt right
			print_pretty(time_est, p, k)
			break

def greedy1(time_est, k, p):
	"""
	Return 1 if successful; 0 if undershoot; 2 if overshoot
	Note : An array for scribe times is probably unessasary
	Note : My logic here is probably bad, considering how hard it was
	to get it to print properly. 
	"""
	# scribe = 0
	# over = 0

	scribe_times = [0]*k # to contain the total time for each of the k scribes
	max_time = time_est
	zero = False

	# i = 0 # index for p 
	# for j in range(0, k):
	# 	while(i < len(p)):
	# 		if (scribe_times[j] + p[i] <= time_est):
	# 			scribe_times[j] = scribe_times[j] + p[i]
	# 			i = i + 1
	# 		else:	# Moving to next scribe
	# 			if (scribe_times[j] == time_est):
	# 				zero = True				
	# 			if j == k-1: # if it's the last scribe: 
	# 				if i < len(p)-1 :  # if we have under-estimated, then we will 
	# 					return(0) # i will be less than len(p)-1
	# 				if (zero):
	# 					return(1)
	# 				else:
	# 					return(2)
	# 			break 
	# return(2)


	i = 0 # index for p 
	for j in range(0, k):
		while(i < len(p)):
			if (scribe_times[j] + p[i] <= time_est):
				scribe_times[j] = scribe_times[j] + p[i]
				i = i + 1
			else:	# Moving to next scribe
				# if scribe_times[j] > max_time:
				# 	max_time = scribe_times[j]
				if (scribe_times[j] == time_est):
					zero = True				
				if j == k-1: # if it's the last scribe: 
					if i < len(p)-1 :  # if we have under-estimated, then we will 
						return(0) # i will be less than len(p)-1
					if (zero):
						return(1)
					else:
						return(2)
				break 
	# if max_time > time_est:
	return(2)
	# else:
	# 	return(1)



	# scribe_times = [0]*k # to contain the total time for each of the k scribes
	# max_time = 0
	# zero = False

	# i = 0 # index for p 
	# for j in range(0, k):
	# 	while(i < len(p)):
	# 		if (scribe_times[j] + p[i]) <= time_est:
	# 			sys.stdout.write("scribe_times["+str(j)+"] + p["+str(i)+"] <= "+ str(time_est) + "\n")
	# 			scribe_times[j] = scribe_times[j] + p[i]
	# 			i = i + 1
	# 			sys.stdout.write("scribe_times["+str(j)+"] = " + str(scribe_times[j]) + " i = " + str(i) + "\n")

	# 		else:	# Moving to next scribe
	# 			print("max time: " + str(max_time) +"\n")
	# 			if (scribe_times[j] > max_time):
	# 				print("scribe_times j is larger " + str(j) + str(max_time)+"\n" )
	# 				max_time = scribe_times[j]
	# 			sys.stdout.write("else.... j = " + str(j) + " and k = " + str(k)+"\n")
	# 			if (scribe_times[j] == time_est):
	# 				zero = True				
	# 			if j == k-1: # if it's the last scribe: 
	# 				if i <= len(p)-1 :  # if we have under-estimated, then we will 
	# 					return(0) # i will be less than len(p)-1
	# 				if (zero):
	# 					return(1)
	# 				else:
	# 					return(2)
	# 			break 
	
	# if max_time < time_est:
	# 	return(1)
	# else:
	# 	return(2)
